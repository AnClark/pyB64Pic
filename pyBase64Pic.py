# -*- coding: utf-8 -*-
"""
    pyB64Pic
    ~~~~~~~~

    Powered by AnClark

    A simple toolkit to deal with image used on the Web among files, byte streams, and Base64 strings.
    Also, it can support convert image into a DATA URL. Data URL is popular since HTML5 was born.

    :copyright: (c) 2017 by AnClark Liu @ Huazhong University of Science and Technology
    :license: MIT License

    Copyright (c) 2017 AnClark Liu

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

"""

import base64, os
from sys import argv

SCRIPT_ROOT = os.path.split(os.path.realpath(__file__))[0]

"""
=============== PRIVATE METHODS ===============
"""

def _load_stream(filename):
    return open(filename, 'rb').read()

def _save_stream(stream, saveto):
    return open(saveto, 'wb').write(stream)

"""
================ RELEASED FEATURES =================
"""

def img_file_to_b64str(filename, urlsafe=False):
    """
    Open an image file, and convert it into Base64 string.
    This can help you store your image in a simple text blob of your SQL databases.
    :param filename: The file you want to convert
    :param urlsafe: Trigger using URL-Safe format. You'd better set it true if you want to post these string to an HTML page.
    :return: Converted string.
    """
    # Open image file as byte
    file_byte = open(filename, 'rb').read()

    if urlsafe:
        file_base64 = base64.urlsafe_b64encode(file_byte)
    else:
        file_base64 = base64.standard_b64encode(file_byte)

    file_base64_string = file_base64.decode('utf-8')

    return file_base64_string


def b64str_to_img_file(src, saveto, urlsafe=False):
    """
    Re-generate image file from any Base64 string generated by img_to_base64_str(), and save it to disk.
    :param src: The string you want to decode.
    :param saveto: Specify the path of generated file to save to.
    :param urlsafe: Trigger using URL-Safe format. It must be consistent with your choice when first generating this string.
    :return: An integer of the size of the picture
    """
    file_base64 = src.encode('utf-8')

    if urlsafe:
        file_byte = base64.urlsafe_b64decode(file_base64)
    else:
        file_byte = base64.standard_b64encode(file_base64)

    OUT_FILE = open(saveto, 'wb')
    return OUT_FILE.write(file_byte)


def img_stream_to_b64str(stream, urlsafe=False):
    """
    Convert a byte stream of image file to Base64 encoded string.
    :param stream: The byte stream of the file.
    :param urlsafe: Trigger using URL-Safe format.
    :return: Encoded Base64 string.
    """
    if urlsafe:
        stream_base64 = base64.urlsafe_b64encode(stream)
    else:
        stream_base64 = base64.standard_b64encode(stream)

    stream_base64_string = stream_base64.decode('utf-8')

    return stream_base64_string


def b64str_to_img_stream(src, urlsafe=False):
    """
    Decode a Base64 string of image to the image file's byte stream.
    :param src: The Base64 string you want to decode.
    :param urlsafe: Trigger using URL-Safe format. Must be consistent with what you generate with.
    :return: Decoded byte stream of image.
    """
    stream_base64 = src.encode('utf-8')

    if urlsafe:
        stream = base64.urlsafe_b64decode(stream_base64)
    else:
        stream = base64.standard_b64decode(stream_base64)

    return stream


def getWebImgType_file(filename):
    """
    Get image file type of an image stored in disk. Can be used to verify if an image is available for web.
    :param filename: The file you want to verify.
    :return: Image file type. If image is invalid, returns False.
    """
    data = open(filename,'rb').read(11)

    # JPG
    if data[:4] == b'\xff\xd8\xff\xe0' and data[6:11] == b'JFIF\x00':
        return 'JPEG'
    # PNG
    if data[:6] == b'\x89PNG\r\n':
        return 'PNG'
    # GIF
    if data[:3] == b'\x47\x49\x46\x38':
        return 'GIF'

    # Format not recognised
    return False


def getWebImgType_stream(stream):
    """
    Get image file type of an image stream. Can be used to verify if an image is available for web.
    :param stream: The file you want to verify.
    :return: Image file type. If image is invalid, returns False.
    """
    data = stream[:11]

    # JPG
    if data[:4] == b'\xff\xd8\xff\xe0' and data[6:11] == b'JFIF\x00':
        return 'jpeg'
    # PNG
    if data[:6] == b'\x89PNG\r\n':
        return 'png'
    # GIF
    if data[:3] == b'\x47\x49\x46\x38':
        return 'gif'

    # Format not recognised
    return False



def img_stream_to_b64_dataurl(stream):
    """
    Convert a byte stream of an image file to DATA URL, which can be directly used in HTML and CSS.
    This is most recommended in my module.

    :param stream: The image file's byte stream.
    :return: A fresh standard Data URL.
    """

    # Check image file type
    filetype = getWebImgType_stream(stream)
    if not filetype:
        return False

    # Start convert
    b64str = img_stream_to_b64str(stream, urlsafe=False)
    b64url = "data:image/%s;base64,%s" % (filetype, b64str)

    return b64url



if __name__ == "__main__":
    ss = _load_stream(argv[1])
    u = img_stream_to_b64_dataurl(ss)
    print(u)
